# modules/kernel_exploit_enumerator.py
import subprocess
import os
import platform
import re

def run():
    findings = []

    try:
        # Kernel version check
        kernel_version = platform.release()
        findings.append(f"[*] Kernel Version: {kernel_version}")
        
        known_vuln_patterns = {
            "4.4": "Dirty Cow CVE-2016-5195",
            "5.8": "OverlayFS Privilege Escalation CVE-2021-3493",
            "3.13": "AF_PACKET race condition CVE-2015-1333"
        }

        for pattern, vuln in known_vuln_patterns.items():
            if pattern in kernel_version:
                findings.append(f"[!] Kernel version vulnerable to: {vuln}")

        # Check loaded kernel modules
        modules = subprocess.check_output(['lsmod'], text=True)
        if "overlay" in modules:
            findings.append("[!] OverlayFS module loaded — potential attack surface.")

        # Look for writable modules dir
        if os.access("/lib/modules/" + kernel_version, os.W_OK):
            findings.append("[!] Writable modules directory — high risk.")

    except Exception as e:
        return f"[!] Error during kernel analysis: {e}"

    return "\n".join(findings) if findings else "[✓] No kernel exploit vectors found."
