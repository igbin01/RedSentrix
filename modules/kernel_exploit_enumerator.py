import requests
import platform
import subprocess
import json

# Your CVE API token (replace with the actual token you provided)
API_TOKEN = "18912c9014e5104d723c689f0f3fa972a650a9ff.eyJzdWIiOjExOTEwLCJpYXQiOjE3NDcwNDc3NDUsImV4cCI6MTg2NzAxNzYwMCwia2lkIjoxLCJjIjoiMXJNc3pEZTZzenV1Z3l1OElqTzBHK0FXcnRhR3l0Z2lXajdiUU9zSlJoaSszZWcxU3gwRU5XTzU4YUhnVTI2bmZ5bFE0QmJQaVE9PSJ9"

# Define the NVD CVE database API endpoint
NVD_CVE_API_URL = "https://api.cve.circl.lu/api/cve/"

# Function to get system information (kernel version)
def get_kernel_version():
    try:
        kernel_version = platform.uname().release
        print(f"[+] Kernel version detected: {kernel_version}")
        return kernel_version
    except Exception as e:
        print(f"[-] Error fetching kernel version: {e}")
        return None

# Function to check for CVE vulnerabilities in the NVD database
def check_cve_for_kernel(kernel_version):
    try:
        print(f"[+] Checking for vulnerabilities related to kernel version: {kernel_version}")

        # Make an API request to the CVE database with the kernel version
        headers = {
            'Authorization': f'Bearer {API_TOKEN}'
        }
        response = requests.get(f"{NVD_CVE_API_URL}{kernel_version}", headers=headers)

        if response.status_code == 200:
            cve_data = response.json()
            if "results" in cve_data:
                print(f"[+] Found {len(cve_data['results'])} CVE(s) for kernel version {kernel_version}:")
                for cve in cve_data['results']:
                    print(f"  - CVE ID: {cve.get('cve_id')}")
                    print(f"    Description: {cve.get('description')}")
                    print(f"    Severity: {cve.get('cvss2_score')}")
                    print(f"    Link: {cve.get('url')}\n")
            else:
                print(f"[+] No CVEs found for kernel version {kernel_version}")
        else:
            print(f"[-] Error fetching CVE data: {response.status_code}")

    except requests.exceptions.RequestException as e:
        print(f"[-] Error during CVE API request: {e}")

# Function to check for kernel exploits (dummy example - can be extended with real exploits)
def kernel_exploit_check(kernel_version):
    print(f"[+] Checking for known kernel exploits for version: {kernel_version}")
    # Placeholder for kernel exploit checks (you can extend this with actual exploit checks)
    # Example: Check against a list of known exploits
    known_exploits = ["CVE-2019-5736", "CVE-2020-14386", "CVE-2021-3171"]
    
    # Simulate checking against the known exploits
    for exploit in known_exploits:
        print(f"  - Known exploit: {exploit} found in kernel version {kernel_version}")

# Main function to run the kernel exploit enumerator
def kernel_exploit_enumerator():
    print("ðŸŒ€ Starting Kernel Exploit Enumeration ðŸŒ€")
    kernel_version = get_kernel_version()

    if kernel_version:
        # Check for CVEs associated with the kernel version
        check_cve_for_kernel(kernel_version)

        # Check for known kernel exploits (dummy example)
        kernel_exploit_check(kernel_version)

if __name__ == "__main__":
    kernel_exploit_enumerator()

